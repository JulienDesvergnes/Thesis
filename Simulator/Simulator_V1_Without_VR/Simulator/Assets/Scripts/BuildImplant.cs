using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.IO;
using System.Globalization;

public enum TypeImplant { Scoreboard = 0, Wireframe = 1, All = 2 };

public class BuildImplant : MonoBehaviour
{

    public int NumberOfElectrodesW = 18;
    public int NumberOfElectrodesH = 15;
    public int PercentOfNotWorkingElectrodes = 30;
    public string ImplantName = "";
    public TypeImplant typeImplant = TypeImplant.Scoreboard;
    private static System.Random random = new System.Random();
    public int NumberMinOfLevels = 4;
    public int NumberMaxOfLevels = 8;
    public bool EnableAutogeneratedGrayScale = false;
    public float SizeSobelWindow = 0.02f;
    public float TresholdSobelDetection = 0.05f;

    ArrayList generateRandomTab(float minValue, float maxValue, int nbElem)
    {
        ArrayList res = new ArrayList();
        for (int i = 0; i < nbElem; ++i)
        {
            res.Add(random.NextDouble() * (maxValue - minValue) + minValue);
        }
        return res;
    }

    ArrayList generateRandomPlusMoins(int nbElem)
    {
        ArrayList res = new ArrayList();
        for (int i = 0; i < nbElem; ++i)
        {
            if(random.NextDouble() < 0.5)
            {
                res.Add("-");
            }else
            {
                res.Add("");
            }
           
        }
        return res;
    }

    ArrayList generateRandomBrokenElectrodes(float percentOfBroken, int nbElem)
    {
        ArrayList res = new ArrayList();
        for (int i = 0; i < nbElem; ++i)
        {
            if(random.NextDouble() < percentOfBroken)
            {
                res.Add(true);
            }
            else
            {
                res.Add(false);
            }
        }
        return res;
    }

    // Start is called before the first frame update
    void Start()
    {
        float tailleZoneW = (float)(1.0 / NumberOfElectrodesW);
        float tailleZoneH = (float)(1.0 / NumberOfElectrodesH);
        int NumberOfElectrodesTotal = NumberOfElectrodesW * NumberOfElectrodesH;
        ArrayList DELTAX = generateRandomTab(0.0f, tailleZoneW / 4, NumberOfElectrodesTotal);
        ArrayList DELTAY = generateRandomTab(0.0f, tailleZoneH / 4, NumberOfElectrodesTotal);
        ArrayList PLUSOUMOINSX = generateRandomPlusMoins(NumberOfElectrodesTotal);
        ArrayList PLUSOUMOINSY = generateRandomPlusMoins(NumberOfElectrodesTotal);
        ArrayList BROKEN = generateRandomBrokenElectrodes(0.3f, NumberOfElectrodesTotal);
        ArrayList RAYONS = generateRandomTab(Math.Min(tailleZoneH, tailleZoneW) / 8, Math.Min(tailleZoneH, tailleZoneW) / 4, NumberOfElectrodesTotal);
        CultureInfo en_US = new CultureInfo("en-US");

        const string quote = "\"";

        if (ImplantName == "")
        {
            Debug.Log("PAS DE NOM D'IMPLANT !!!");
            return;
        }

        string type = "";
        if (typeImplant == TypeImplant.Scoreboard)
        {
            type = "Scoreboard";
        }
        if (typeImplant == TypeImplant.Wireframe)
        {
            type = "Wireframe";
        }
        string info = "_" + (NumberOfElectrodesW).ToString() + "_" + (string)(NumberOfElectrodesH).ToString() + "_" + (string)(PercentOfNotWorkingElectrodes).ToString() + "PercentNotWorking" + type;
        string path = @"C:\Users\REVA-2RTX5\Simulator\Assets\Shaders\" + ImplantName + info + ".shader";
        if (!File.Exists(path))
        {
            // Create a file to write to.
            using (StreamWriter sw = File.CreateText(path))
            {
                sw.WriteLine("Shader " + quote + "Custom/" + ImplantName + info + quote);
                sw.WriteLine("{");
                sw.WriteLine("   Properties");
                sw.WriteLine("   {");
                sw.WriteLine("      [PerRendererData] _MainTex(" + quote + "Sprite Texture" + quote + ", 2D) = "+quote + "white" + quote +" {}");
                sw.WriteLine("      _Color(" + quote + "Tint" + quote + ", Color) = (1,1,1,1)");
                sw.WriteLine("      [MaterialToggle] PixelSnap(" + quote + "Pixel snap" + quote + ", Float) = 0");
                sw.WriteLine("   }");

                sw.WriteLine("");

                sw.WriteLine("   SubShader");
                sw.WriteLine("   {");
                sw.WriteLine("      Tags");
                sw.WriteLine("      {");
                sw.WriteLine("         " + quote + "Queue" + quote + " = " + quote + "Transparent" + quote);
                sw.WriteLine("         " + quote + "IgnoreProjector" + quote + " = " + quote + "True" + quote);
                sw.WriteLine("         " + quote + "RenderType" + quote + " = " + quote + "Opaque" + quote);
                sw.WriteLine("         " + quote + "PreviewType" + quote + " = " + quote + "Plane" + quote);
                sw.WriteLine("         " + quote + "CanUseSpriteAtlas" + quote + " = " + quote + "True" + quote);
                sw.WriteLine("      }");

                sw.WriteLine("");

                sw.WriteLine("      Cull Off");
                sw.WriteLine("      Lighting Off");
                sw.WriteLine("      ZWrite Off");

                sw.WriteLine("");

                sw.WriteLine("      Pass");
                sw.WriteLine("      {");
                sw.WriteLine("         CGPROGRAM");
                sw.WriteLine("         #pragma vertex vert");
                sw.WriteLine("         #pragma fragment frag");
                sw.WriteLine("         #pragma multi_compile _ PIXELSNAP_ON");
                sw.WriteLine("         #include " + quote + "UnityCG.cginc" + quote);

                sw.WriteLine("");

                sw.WriteLine("         struct appdata_t");
                sw.WriteLine("         {");
                sw.WriteLine("            float4 vertex   : POSITION;");
                sw.WriteLine("            float4 color    : COLOR;");
                sw.WriteLine("            float2 texcoord : TEXCOORD0;");
                sw.WriteLine("         };");

                sw.WriteLine("");

                sw.WriteLine("         struct v2f");
                sw.WriteLine("         {");
                sw.WriteLine("            float4 vertex   : SV_POSITION;");
                sw.WriteLine("            fixed4 color : COLOR;");
                sw.WriteLine("            half2 texcoord  : TEXCOORD0;");
                sw.WriteLine("         };");

                sw.WriteLine("");

                sw.WriteLine("         fixed4 _Color;");

                sw.WriteLine("");

                sw.WriteLine("         v2f vert(appdata_t IN)");
                sw.WriteLine("         {");
                sw.WriteLine("            v2f OUT;");
                sw.WriteLine("            OUT.vertex = UnityObjectToClipPos(IN.vertex);");
                sw.WriteLine("            OUT.texcoord = IN.texcoord;");
                sw.WriteLine("            OUT.color = IN.color * _Color;");
                sw.WriteLine("            #ifdef PIXELSNAP_ON");
                sw.WriteLine("            OUT.vertex = UnityPixelSnap(OUT.vertex);");
                sw.WriteLine("            #endif");
                sw.WriteLine("            return OUT;");
                sw.WriteLine("         }");

                sw.WriteLine("");

                sw.WriteLine("         sampler2D _MainTex;");
                sw.WriteLine("         float4 _MainTex_TexelSize;");

                sw.WriteLine("");

                if (typeImplant == TypeImplant.Scoreboard || typeImplant == TypeImplant.All)
                {

                    sw.WriteLine("         fixed4 frag(v2f IN) : SV_Target");
                    sw.WriteLine("         {");
                    sw.WriteLine("            fixed4 c = tex2D(_MainTex, IN.texcoord) * IN.color;");

                    sw.WriteLine("");

                    sw.WriteLine("            int NumberOfElectrodesW = " + NumberOfElectrodesW.ToString() + ";");
                    sw.WriteLine("            int NumberOfElectrodesH = " + NumberOfElectrodesH.ToString() + ";");
                    sw.WriteLine("            float tailleZoneW = 1.0 / NumberOfElectrodesW;");
                    sw.WriteLine("            float tailleZoneH = 1.0 / NumberOfElectrodesH;");
                    sw.WriteLine("            bool zoneTrouve = false;");
                    sw.WriteLine("            float WGauche, WDroite, HBas, HHaut;");
                    sw.WriteLine("            int indZone = 0;");

                    sw.WriteLine("");

                    sw.WriteLine("            float DELTAX[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float DELTAY[" + NumberOfElectrodesTotal.ToString() + "];");

                    for (int i = 0; i < NumberOfElectrodesTotal; ++i)
                    {
                        sw.WriteLine("            DELTAX[" + i.ToString() + "] = " + PLUSOUMOINSX[i] + ((double)DELTAX[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            DELTAY[" + i.ToString() + "] = " + PLUSOUMOINSY[i] + ((double)DELTAY[i]).ToString("n10", en_US) + ";");
                    }

                    sw.WriteLine("");

                    //sw.WriteLine("            float eps = 0.005;");

                    //sw.WriteLine("");

                    //sw.WriteLine("            for (int w = 0; w <= NumberOfElectrodesW; w++) {");
                    //sw.WriteLine("               for (int h = 0; h <= NumberOfElectrodesH; h++) {");
                    //sw.WriteLine("                  indZone =  w + 2 * h;");
                    //sw.WriteLine("                  if (abs((h + 0.5) * tailleZoneH  + taby[indZone] - IN.texcoord.y ) < eps");
                    //sw.WriteLine("                   && abs((w + 0.5) * tailleZoneW  + tabx[indZone] - IN.texcoord.x ) < eps)");
                    //sw.WriteLine("                  {");
                    //sw.WriteLine("                     return fixed4(1, 0, 1, 1);");
                    //sw.WriteLine("                  }");
                    //sw.WriteLine("               }");
                    //sw.WriteLine("            }");

                    sw.WriteLine("            for (int w = 0; w < NumberOfElectrodesW; w++) {");
                    sw.WriteLine("               for (int h = 0; h < NumberOfElectrodesH; h++) {");
                    sw.WriteLine("                  indZone =  w + NumberOfElectrodesW * h;");
                    sw.WriteLine("                  /*if (h * tailleZoneH + taby[indZone] < IN.texcoord.y && IN.texcoord.y < (h + 1) * tailleZoneH + taby[indZone]");
                    sw.WriteLine("                  && w * tailleZoneW + tabx[indZone] < IN.texcoord.x  && IN.texcoord.x < (w + 1) * tailleZoneW + tabx[indZone]) {*/");
                    sw.WriteLine("                  if (h * tailleZoneH < IN.texcoord.y && IN.texcoord.y < (h + 1) * tailleZoneH");
                    sw.WriteLine("                   && w * tailleZoneW < IN.texcoord.x  && IN.texcoord.x < (w + 1) * tailleZoneW) {");
                    sw.WriteLine("                     WGauche = w * tailleZoneW;");
                    sw.WriteLine("                     WDroite = (w + 1) * tailleZoneW;");
                    sw.WriteLine("                     HBas = h * tailleZoneH;");
                    sw.WriteLine("                     HHaut = (h + 1) * tailleZoneH;");
                    sw.WriteLine("                     zoneTrouve = true;");
                    sw.WriteLine("                     break;");
                    sw.WriteLine("                  }");
                    sw.WriteLine("                  if (zoneTrouve) {");
                    sw.WriteLine("                     break;");
                    sw.WriteLine("                  }");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");

                    sw.WriteLine("");

                    sw.WriteLine("            fixed4 accumulateur = fixed4(0, 0, 0, 1);");
                    sw.WriteLine("            for (int localw = -100; localw < 100; localw++) {");
                    sw.WriteLine("               for (int localh = -100; localh < 100; localh++) {");
                    sw.WriteLine("                  if (!zoneTrouve) {");
                    sw.WriteLine("                     return fixed4(0, 0, 0, 1);");
                    sw.WriteLine("                  }");
                    sw.WriteLine("                  accumulateur.rgb = accumulateur.rgb + tex2D(_MainTex, float2(WGauche + tailleZoneW / 2 + localw * 0.001, HBas + tailleZoneH / 2 + localh * 0.001));");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");
                    sw.WriteLine("            accumulateur.rgb /= 4 * 100 * 100;");
                    sw.WriteLine("            float r = accumulateur.r;");
                    sw.WriteLine("            float g = accumulateur.g;");
                    sw.WriteLine("            float b = accumulateur.b;");
                    sw.WriteLine("            float gray = (0.3 * r) + (0.59 * g) + (0.11 * b);");
                    sw.WriteLine("            accumulateur.r = gray;");
                    sw.WriteLine("            accumulateur.g = gray;");
                    sw.WriteLine("            accumulateur.b = gray;");
                    sw.WriteLine("            return accumulateur;");

                    sw.WriteLine("         }");

                    sw.WriteLine("");
                    sw.WriteLine("      ENDCG");
                    sw.WriteLine("      }");
                }

                if (typeImplant == TypeImplant.Wireframe || typeImplant == TypeImplant.All)
                {
                    // Sobel
                    sw.WriteLine("         float sobel(sampler2D tex, float2 uv) {");
                    sw.WriteLine("            float sizeWindow = " + ((double)SizeSobelWindow).ToString("n10", en_US) + ";");
                    sw.WriteLine("            float2 delta = float2(sizeWindow, sizeWindow);");

                    sw.WriteLine("");

                    sw.WriteLine("            float4 hr = float4(0, 0, 0, 0);");
                    sw.WriteLine("            float4 vt = float4(0, 0, 0, 0);");

                    sw.WriteLine("");

                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(-1.0, -1.0) * delta)) *  1.0;");
                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(1.0, -1.0) * delta)) * -1.0;");
                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(-1.0, 0.0) * delta)) *  2.0;");
                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(1.0, 0.0) * delta)) * -2.0;");
                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(-1.0, 1.0) * delta)) *  1.0;");
                    sw.WriteLine("            hr += tex2D(tex, (uv + float2(1.0, 1.0) * delta)) * -1.0;");

                    sw.WriteLine("");

                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(-1.0, -1.0) * delta)) *  1.0;");
                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(0.0, -1.0) * delta)) *  2.0;");
                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(1.0, -1.0) * delta)) *  1.0;");
                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(-1.0, 1.0) * delta)) * -1.0;");
                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(0.0, 1.0) * delta)) * -2.0;");
                    sw.WriteLine("            vt += tex2D(tex, (uv + float2(1.0, 1.0) * delta)) * -1.0;");

                    sw.WriteLine("");

                    sw.WriteLine("            return sqrt(hr * hr + vt * vt);");
                    sw.WriteLine("         }");

                    // PixelShader
                    sw.WriteLine("         fixed4 frag(v2f IN) : SV_Target");
                    sw.WriteLine("         {");
                    sw.WriteLine("            int NumberOfElectrodesW = " + NumberOfElectrodesW.ToString() + ";");
                    sw.WriteLine("            int NumberOfElectrodesH = " + NumberOfElectrodesH.ToString() + ";");
                    sw.WriteLine("            float tailleZoneW = 1.0 / NumberOfElectrodesW;");
                    sw.WriteLine("            float tailleZoneH = 1.0 / NumberOfElectrodesH;");
                    sw.WriteLine("            bool zoneTrouve = false;");
                    sw.WriteLine("            float WGauche, WDroite, HBas, HHaut;");
                    sw.WriteLine("            int indZone = 0;");

                    sw.WriteLine("");

                    sw.WriteLine("            for (int w = 0; w < NumberOfElectrodesW; w++) {");
                    sw.WriteLine("               for (int h = 0; h < NumberOfElectrodesH; h++) {");
                    sw.WriteLine("                  indZone =  w + NumberOfElectrodesW * h;");
                    sw.WriteLine("                  /*if (h * tailleZoneH + taby[indZone] < IN.texcoord.y && IN.texcoord.y < (h + 1) * tailleZoneH + taby[indZone]");
                    sw.WriteLine("                  && w * tailleZoneW + tabx[indZone] < IN.texcoord.x  && IN.texcoord.x < (w + 1) * tailleZoneW + tabx[indZone]) {*/");
                    sw.WriteLine("                  if (h * tailleZoneH < IN.texcoord.y && IN.texcoord.y < (h + 1) * tailleZoneH");
                    sw.WriteLine("                   && w * tailleZoneW < IN.texcoord.x  && IN.texcoord.x < (w + 1) * tailleZoneW) {");
                    sw.WriteLine("                     WGauche = w * tailleZoneW;");
                    sw.WriteLine("                     WDroite = (w + 1) * tailleZoneW;");
                    sw.WriteLine("                     HBas = h * tailleZoneH;");
                    sw.WriteLine("                     HHaut = (h + 1) * tailleZoneH;");
                    sw.WriteLine("                     zoneTrouve = true;");
                    sw.WriteLine("                     break;");
                    sw.WriteLine("                  }");
                    sw.WriteLine("                  if (zoneTrouve) {");
                    sw.WriteLine("                     break;");
                    sw.WriteLine("                  }");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");

                    sw.WriteLine("");

                    sw.WriteLine("            fixed4 accumulateur = fixed4(0, 0, 0, 1);");
                    sw.WriteLine("            for (int localw = -10; localw < 10; localw++) {");
                    sw.WriteLine("               for (int localh = -10; localh < 10; localh++) {");
                    sw.WriteLine("                  if (!zoneTrouve) {");
                    sw.WriteLine("                     return fixed4(0, 0, 0, 1);");
                    sw.WriteLine("                  }");
                    sw.WriteLine("                  accumulateur.rgb = accumulateur.rgb + sobel(_MainTex, float2(WGauche + tailleZoneW / 2 + localw * 0.001, HBas + tailleZoneH / 2 + localh * 0.001));");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");
                    sw.WriteLine("            accumulateur.rgb /= 4 * 10 * 10;");
                    sw.WriteLine("            float r = accumulateur.r;");
                    sw.WriteLine("            float g = accumulateur.g;");
                    sw.WriteLine("            float b = accumulateur.b;");
                    sw.WriteLine("            float gray = (0.3 * r) + (0.59 * g) + (0.11 * b);");
                    sw.WriteLine("            if(gray > 0.1) {");
                    sw.WriteLine("               gray = 1;");
                    sw.WriteLine("            } else {");
                    sw.WriteLine("               gray = 0;");
                    sw.WriteLine("            }");
                    sw.WriteLine("            accumulateur.r = gray;");
                    sw.WriteLine("            accumulateur.g = gray;");
                    sw.WriteLine("            accumulateur.b = gray;");
                    sw.WriteLine("            return accumulateur;");
                    sw.WriteLine("         }");
                    sw.WriteLine("      ENDCG");
                    sw.WriteLine("      }");
                }

                sw.WriteLine("      GrabPass");
                sw.WriteLine("      {");
                sw.WriteLine("         " + quote + "_TexturePostCercle" + info + quote);
                sw.WriteLine("      }");

                sw.WriteLine("");

                sw.WriteLine("      Pass");
                sw.WriteLine("      {");
                sw.WriteLine("         Cull Front ZWrite On");
                sw.WriteLine("         Blend Off");
                sw.WriteLine("         CGPROGRAM");
                sw.WriteLine("         #pragma vertex vert");
                sw.WriteLine("         #pragma fragment frag");

                sw.WriteLine("");

                sw.WriteLine("         #include " + quote + "UnityCG.cginc" + quote);

                sw.WriteLine("");

                sw.WriteLine("         struct appdata_t");
                sw.WriteLine("         {");
                sw.WriteLine("            float4 vertex   : POSITION;");
                sw.WriteLine("            float4 color    : COLOR;");
                sw.WriteLine("            float2 texcoord : TEXCOORD0;");
                sw.WriteLine("         };");

                sw.WriteLine("");

                sw.WriteLine("         struct v2f");
                sw.WriteLine("         {");
                sw.WriteLine("            float4 vertex   : SV_POSITION;");
                sw.WriteLine("            fixed4 color : COLOR;");
                sw.WriteLine("            half2 texcoord  : TEXCOORD0;");
                sw.WriteLine("            float4 grabUV : TEXCOORD1;");
                sw.WriteLine("         };");

                sw.WriteLine("");

                sw.WriteLine("         fixed4 _Color;");

                sw.WriteLine("");

                sw.WriteLine("         v2f vert(appdata_t IN)");
                sw.WriteLine("         {");
                sw.WriteLine("            v2f OUT;");
                sw.WriteLine("            OUT.vertex = UnityObjectToClipPos(IN.vertex);");
                sw.WriteLine("            OUT.texcoord = IN.texcoord;");
                sw.WriteLine("            OUT.color = IN.color * _Color;");
                sw.WriteLine("            #ifdef PIXELSNAP_ON");
                sw.WriteLine("            OUT.vertex = UnityPixelSnap(OUT.vertex);");
                sw.WriteLine("            #endif");
                sw.WriteLine("            OUT.grabUV = ComputeGrabScreenPos(OUT.vertex);");
                sw.WriteLine("            return OUT;");
                sw.WriteLine("         }");

                sw.WriteLine("");

                sw.WriteLine("         sampler2D _MainTex;");
                sw.WriteLine("         sampler2D _TexturePostCercle" + info +";");
                sw.WriteLine("         float4 _MainTex_TexelSize;");

                sw.WriteLine("");

                sw.WriteLine("         int nbGrayLevels(int numImplant) {");
                ArrayList nbGrayLevelsByImplants = new ArrayList();
                for(int i = 0; i < NumberOfElectrodesTotal; ++i)
                {
                    int value = random.Next(NumberMinOfLevels, NumberMaxOfLevels);
                    nbGrayLevelsByImplants.Add(value);
                    sw.WriteLine("            if (numImplant == " + i.ToString() + ") return " + value.ToString() + ";");
                }
                sw.WriteLine("            return -1;");
                sw.WriteLine("         }");

                sw.WriteLine("         float GrayLevel(int numImplant, int pos) {");
                for (int i = 0; i < NumberOfElectrodesTotal; ++i)
                {
                    ArrayList Values = generateRandomTab(0.0f, 1.0f, (int)nbGrayLevelsByImplants[i]);
                    Values.Sort();
                    for (int j = 0; j < (int)nbGrayLevelsByImplants[i]; ++j)
                    {
                        sw.WriteLine("            if (numImplant == " + i.ToString() + " && pos == " + j.ToString() + ") return " + ((double)Values[j]).ToString("n3", en_US) + ";");
                    }
                }
                sw.WriteLine("            return -1;");
                sw.WriteLine("         }");

                sw.WriteLine("");

                //for (int i = 0; i < NumberOfElectrodesTotal; ++i)
                //{
                //    int nombreDeNiveauxDeGris = random.Next(4, 9);
                //    sw.WriteLine("            float NIVEAUXDEGRIS" + i.ToString() + "[" + nombreDeNiveauxDeGris.ToString() + "];");

                //    ArrayList Values = generateRandomTab(0.0f, 1.0f, nombreDeNiveauxDeGris);
                //    Values.Sort();

                //    for (int j = 0; j < nombreDeNiveauxDeGris; ++j)
                //    {

                //        sw.WriteLine("            NIVEAUXDEGRIS" + i.ToString() + "[" + j + "] = " + ((double)Values[j]).ToString("n3", en_US) + "; ");
                //    }
                //    sw.WriteLine("");
                //}

                if (typeImplant == TypeImplant.Scoreboard || typeImplant == TypeImplant.All)
                {
                    sw.WriteLine("         fixed4 frag(v2f IN) : SV_Target");
                    sw.WriteLine("         {");
                    sw.WriteLine("            int NumberOfElectrodesW = " + NumberOfElectrodesW.ToString() + ";");
                    sw.WriteLine("            int NumberOfElectrodesH = " + NumberOfElectrodesH.ToString() + ";");
                    sw.WriteLine("            float tailleZoneW = 1.0 / NumberOfElectrodesW;");
                    sw.WriteLine("            float tailleZoneH = 1.0 / NumberOfElectrodesH;");
                    sw.WriteLine("            float WGauche, WDroite, HBas, HHaut;");
                    sw.WriteLine("            float DELTAX[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float DELTAY[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float RAYONS[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float BROKEN[" + NumberOfElectrodesTotal.ToString() + "];");

                    for (int i = 0; i < NumberOfElectrodesTotal; ++i)
                    {
                        sw.WriteLine("            DELTAX[" + i.ToString() + "] = " + PLUSOUMOINSX[i] + ((double)DELTAX[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            DELTAY[" + i.ToString() + "] = " + PLUSOUMOINSY[i] + ((double)DELTAY[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            RAYONS[" + i.ToString() + "] = " + ((double)RAYONS[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            BROKEN[" + i.ToString() + "] = " + ((bool)BROKEN[i]).ToString().ToLower() + ";");
                    }

                    sw.WriteLine("");

                    sw.WriteLine("            for (int w = 0; w < NumberOfElectrodesW; w++) {");
                    sw.WriteLine("               for (int h = 0; h < NumberOfElectrodesH; h++) {");
                    sw.WriteLine("                  WGauche = w * tailleZoneW;");
                    sw.WriteLine("                  WDroite = (w + 1) * tailleZoneW;");
                    sw.WriteLine("                  HBas = h * tailleZoneH;");
                    sw.WriteLine("                  HHaut = (h + 1) * tailleZoneH;");
                    sw.WriteLine("                  int indZone = w + NumberOfElectrodesW * h;");
                    sw.WriteLine("                  float CentreCercleW = ((WDroite - WGauche) / 2.0 + w * tailleZoneW) + DELTAX[indZone];");
                    sw.WriteLine("                  float CentreCercleH = ((HHaut - HBas) / 2.0 + h * tailleZoneH) + DELTAY[indZone];");

                    sw.WriteLine("");

                    sw.WriteLine("                  if (sqrt((CentreCercleW - IN.texcoord.x)*(CentreCercleW -  IN.texcoord.x) + (CentreCercleH - IN.texcoord.y)*(CentreCercleH - IN.texcoord.y)) <= RAYONS[indZone]) {");
                    sw.WriteLine("                     if (!BROKEN[indZone]) {");
                    sw.WriteLine("                        fixed4 col = tex2Dproj(_TexturePostCercle" + info + ", IN.grabUV);");
                    if (EnableAutogeneratedGrayScale)
                    {
                        sw.WriteLine("                        int nbLevels = nbGrayLevels(indZone);");
                        sw.WriteLine("                        for (int i = 0; i < " + (NumberMaxOfLevels - 1).ToString() + "; ++i) {");
                        sw.WriteLine("                           float gi = GrayLevel(indZone, i);");
                        sw.WriteLine("                           float giplus1 = GrayLevel(indZone, i + 1);");
                        sw.WriteLine("                           if (i > nbLevels) {  }");
                        sw.WriteLine("                           else if (gi < col.r) && (giplus1 > col.r)) {");
                        sw.WriteLine("                              if (abs(gi - col.r) > abs(giplus1 - col.r)) {");
                        sw.WriteLine("                                 col.r = giplus1;");
                        sw.WriteLine("                                 col.g = giplus1;");
                        sw.WriteLine("                                 col.b = giplus1;");
                        sw.WriteLine("                              }");
                        sw.WriteLine("                              else {");
                        sw.WriteLine("                                 col.r = gi;");
                        sw.WriteLine("                                 col.g = gi;");
                        sw.WriteLine("                                 col.b = gi;");
                        sw.WriteLine("                              }");
                        sw.WriteLine("                           }");
                        sw.WriteLine("                        }");
                    }
                    sw.WriteLine("                        return col;");
                    sw.WriteLine("                     }");
                    sw.WriteLine("                  }");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");
                    sw.WriteLine("            return fixed4(0, 0, 0, 1);");
                    sw.WriteLine("         }");
                    sw.WriteLine("      ENDCG");
                    sw.WriteLine("      }");
                }

                if (typeImplant == TypeImplant.Wireframe || typeImplant == TypeImplant.All)
                {
                    sw.WriteLine("         fixed4 frag(v2f IN) : SV_Target");
                    sw.WriteLine("         {");
                    sw.WriteLine("            int NumberOfElectrodesW = " + NumberOfElectrodesW.ToString() + ";");
                    sw.WriteLine("            int NumberOfElectrodesH = " + NumberOfElectrodesH.ToString() + ";");
                    sw.WriteLine("            float tailleZoneW = 1.0 / NumberOfElectrodesW;");
                    sw.WriteLine("            float tailleZoneH = 1.0 / NumberOfElectrodesH;");
                    sw.WriteLine("            float WGauche, WDroite, HBas, HHaut;");
                    sw.WriteLine("            float DELTAX[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float DELTAY[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float RAYONS[" + NumberOfElectrodesTotal.ToString() + "];");
                    sw.WriteLine("            float BROKEN[" + NumberOfElectrodesTotal.ToString() + "];");

                    for (int i = 0; i < NumberOfElectrodesTotal; ++i)
                    {
                        sw.WriteLine("            DELTAX[" + i.ToString() + "] = " + PLUSOUMOINSX[i] + ((double)DELTAX[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            DELTAY[" + i.ToString() + "] = " + PLUSOUMOINSY[i] + ((double)DELTAY[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            RAYONS[" + i.ToString() + "] = " + ((double)RAYONS[i]).ToString("n10", en_US) + ";");
                        sw.WriteLine("            BROKEN[" + i.ToString() + "] = " + ((bool)BROKEN[i]).ToString().ToLower() + ";");
                    }

                    sw.WriteLine("");

                    sw.WriteLine("            for (int w = 0; w < NumberOfElectrodesW; w++) {");
                    sw.WriteLine("               for (int h = 0; h < NumberOfElectrodesH; h++) {");
                    sw.WriteLine("                  WGauche = w * tailleZoneW;");
                    sw.WriteLine("                  WDroite = (w + 1) * tailleZoneW;");
                    sw.WriteLine("                  HBas = h * tailleZoneH;");
                    sw.WriteLine("                  HHaut = (h + 1) * tailleZoneH;");
                    sw.WriteLine("                  int indZone = w + NumberOfElectrodesW * h;");
                    sw.WriteLine("                  float CentreCercleW = ((WDroite - WGauche) / 2.0 + w * tailleZoneW) + DELTAX[indZone];");
                    sw.WriteLine("                  float CentreCercleH = ((HHaut - HBas) / 2.0 + h * tailleZoneH) + DELTAY[indZone];");

                    sw.WriteLine("");

                    sw.WriteLine("                  if (sqrt((CentreCercleW - IN.texcoord.x)*(CentreCercleW -  IN.texcoord.x) + (CentreCercleH - IN.texcoord.y)*(CentreCercleH - IN.texcoord.y)) <= RAYONS[indZone]) {");
                    sw.WriteLine("                     if (!BROKEN[indZone]) {");
                    sw.WriteLine("                        fixed4 col = tex2Dproj(_TexturePostCercle" + info + ", IN.grabUV);");
                    if (EnableAutogeneratedGrayScale)
                    {
                        sw.WriteLine("                        int nbLevels = nbGrayLevels(indZone);");
                        sw.WriteLine("                        for (int i = 0; i < " + (NumberMaxOfLevels - 1).ToString() + "; ++i) {");
                        sw.WriteLine("                           float gi = GrayLevel(indZone, i);");
                        sw.WriteLine("                           float giplus1 = GrayLevel(indZone, i + 1);");
                        sw.WriteLine("                           if (i > nbLevels) {  }");
                        sw.WriteLine("                           else if (gi < col.r) && (giplus1 > col.r)) {");
                        sw.WriteLine("                              if (abs(gi - col.r) > abs(giplus1 - col.r)) {");
                        sw.WriteLine("                                 col.r = giplus1;");
                        sw.WriteLine("                                 col.g = giplus1;");
                        sw.WriteLine("                                 col.b = giplus1;");
                        sw.WriteLine("                              }");
                        sw.WriteLine("                              else {");
                        sw.WriteLine("                                 col.r = gi;");
                        sw.WriteLine("                                 col.g = gi;");
                        sw.WriteLine("                                 col.b = gi;");
                        sw.WriteLine("                              }");
                        sw.WriteLine("                           }");
                        sw.WriteLine("                        }");
                    }
                    sw.WriteLine("                        return col;");
                    sw.WriteLine("                     }");
                    sw.WriteLine("                  }");
                    sw.WriteLine("               }");
                    sw.WriteLine("            }");
                    sw.WriteLine("            return fixed4(0, 0, 0, 1);");
                    sw.WriteLine("         }");
                    sw.WriteLine("      ENDCG");
                    sw.WriteLine("      }");
                }

                sw.WriteLine("");

                sw.WriteLine("   }");
                sw.WriteLine("}");
            }
        }
    }

    void Update()
    {
    }
}
